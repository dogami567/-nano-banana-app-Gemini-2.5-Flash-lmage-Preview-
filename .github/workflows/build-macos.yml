name: Build macOS App (Updated)

on:
  push:
    tags:
      - 'v*'  # 当推送标签时触发
    branches:
      - master  # 当推送到master分支时触发
  pull_request:
    branches:
      - master
  workflow_dispatch:  # 允许手动触发

jobs:
  build-macos:
    runs-on: macos-13  # Use specific version for stability
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_macos.txt
        
    - name: Build macOS App
      run: |
        echo "Current directory: $(pwd)"
        echo "Available spec files:"
        ls -la *.spec || echo "No .spec files found"
        
        if [ -f "macos-release.spec" ]; then
          echo "✅ Using macos-release.spec"
          pyinstaller macos-release.spec
        else
          echo "⚠️  macos-release.spec not found, using fallback"
          pyinstaller \
            --onedir \
            --windowed \
            --name "Nano-Banana" \
            --add-data "index.html:." \
            --add-data "script.js:." \
            --add-data "api.js:." \
            --add-data "utils.js:." \
            --add-data "styles.css:." \
            --osx-bundle-identifier "com.nanobanan.app" \
            app.py
        fi
          
    - name: Verify build
      run: |
        ls -la dist/
        if [ -d "dist/Nano-Banana.app" ]; then
          echo "✅ macOS app built successfully"
          echo "App size: $(du -sh dist/Nano-Banana.app | cut -f1)"
        else
          echo "❌ Build failed - no .app found"
          exit 1
        fi
        
    - name: Test app launch (basic check)
      run: |
        # Test if the app can be executed (basic validation)
        if [ -x "dist/Nano-Banana.app/Contents/MacOS/Nano-Banana" ]; then
          echo "✅ App executable is valid"
        else
          echo "❌ App executable not found or not executable"
          exit 1
        fi
        
    - name: Create DMG (macOS installer)
      run: |
        echo "Creating DMG installer..."
        # Simple DMG creation using hdiutil (built into macOS)
        hdiutil create -volname "Nano Banana" -srcfolder dist/ -ov -format UDZO "Nano-Banana-macOS.dmg" || echo "DMG creation failed, continuing without DMG"
        
        if [ -f "Nano-Banana-macOS.dmg" ]; then
          echo "✅ DMG created successfully"
          ls -la Nano-Banana-macOS.dmg
        else
          echo "⚠️  DMG creation failed, will upload .app only"
        fi
        
    - name: Upload macOS App as artifact
      uses: actions/upload-artifact@v4
      with:
        name: nano-banana-macos
        path: |
          dist/Nano-Banana.app
          Nano-Banana-macOS.dmg
        retention-days: 30
        if-no-files-found: warn
        
    # Only create release if this is a tag push
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          Nano-Banana-macOS.dmg
        name: "🍌 Nano Banana ${{ github.ref_name }} - macOS版本"
        body: |
          ## 🍎 macOS版本发布
          
          ### 📦 下载方式
          - 下载 `Nano-Banana-macOS.dmg`
          - 双击打开，拖拽到应用程序文件夹
          - 首次运行需要在系统设置中允许
          
          ### 🔑 使用方法
          1. 获取Gemini API Key: https://ai.google.dev/
          2. 启动应用输入API Key
          3. 上传图片开始使用
          
          ### ✨ 主要功能
          - 双图合成和单图增强
          - 拖拽上传和剪贴板粘贴
          - 生成历史记录
          - 本地处理保护隐私
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}